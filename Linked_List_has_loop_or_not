#include<iostream>
#include<unordered_map>
using namespace std;

class node
{
    public:
    int value;
    node* next;
    node()
    {
        next = NULL;
    }

};

class Linked_List
{
    public:
    node* head = new node();

    void insert_from_beg(int number)
    {
        node* temp = new node();
            temp->value = number;
            temp->next = head;
            head = temp;
        }

   void insert_from_middle(int number, int index)
{
    if (head == NULL)
    {
        cout << "Linked List is Empty, insert from the beginning first" << endl;
        return;
    }
    else
    {
        node* temp = new node();
        temp->value = number;
        if (index == 0)
        {
            temp->next = head;
            head = temp; // Update head to point to the new node
        }
        else
        {
            node* ptr = head;
           while (index > 1 && ptr != NULL)
            {
                ptr = ptr->next;
                index--;
            }
            if (ptr == NULL)
            {
                cout << "Invalid index" << endl;
                return;
            }
            temp->next = ptr->next;
            ptr->next = temp;
        }
    }
}


    void insert_at_end(int number)
    {
        node* temp = new node();
        temp->value = number;
        if (head == NULL)
        {
            head = temp;
        }
        else
        {
            node* ptr =  head;
            while (ptr->next != NULL)
            {
                ptr = ptr->next;
            }
            ptr->next = temp;
        }
    }

    void display()
    {
        node* ptr = head;
       while (ptr != NULL)
        {
            cout<<ptr->value<<" -> ";
            ptr = ptr->next;
        }
    }

void deletion_from_beg()
{
    if (head == NULL)
    {
        cout << "Linked List is Already EMpty "<<endl;
    }
    else
    {
       node* ptr = head;
       head = head->next;
       delete(ptr);
    }
}

void deletion_from_middle(int index)
{
    if (head == NULL)
    {
        cout<<"LInkedd List is empty "<<endl;
    }
    else if(index == 0)
    {
        node* ptr = head;
        head = head->next;
        delete(ptr);
    }
    else
    {
        node* ptr = head;
        while (index > 1)
        {
            ptr = ptr->next;
            index--;
        }
        node* ptr2 = head;
        ptr2 = ptr->next;
        ptr->next = ptr->next->next;
        delete(ptr2);
    }
}

void deletion_from_end()
{
    if (head == NULL)
    {
        cout << "Linked List is Empty" << endl;
        return;
    }
    else if (head->next == NULL)
    {
        delete head;
        head = NULL;
    }
    else
    {
        node* ptr = head;
        node* prev = NULL;
       while (ptr->next != NULL)
        {
            prev = ptr;
            ptr = ptr->next;
        }
        delete ptr;
        prev->next = NULL;
    }
}

bool Loop__check()
{
    if (head == NULL)
    {
        return  false;
    }

    unordered_map<node*,int>m;

    node* fast = head;
    while (fast != NULL)
    {
        if (!m[fast])
        {
            m[fast] = 1;
            fast = fast->next;
        }

        else return true;
    }
    
    return false;
}

};


int main()
{
    Linked_List a;
    cout<<"Before swap pair elements "<<endl;
    a.insert_from_beg(21);
    a.insert_from_beg(22);
    a.insert_from_beg(23);
    a.insert_from_beg(24);
    a.insert_from_beg(25);
    a.display();
    if (a.Loop__check())
    {
        cout <<"Loop  is present  " <<endl;
    }
    else
    {
        cout <<"Loop is not present "<<endl;
    }
    
    
}
